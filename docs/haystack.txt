Format of an OpenActa Haystack file, version 1.0
================================================
Copyright (C) 2023 Arjen Lentz & Lentz Pty Ltd; All Rights Reserved
<arjen (at) openacta (dot) dev>

The OpenActa/Haystack documentation is licensed under a CC-BY-SA license.
https://creativecommons.org/licenses/by-sa/4.0/


This document describes the uncompressed/unencrypted OpenActa Haystack file
format on non-volatile media.

Characteristics
    - Time-based Key-value store (non-unique)
    - Linked haystack stalks (tuples) make up bales (rows)
    - WORM (write-once, read-many) - no updates/deletes possible
    - Keys referenced via Dictionary for efficiency
    - Sorted array of entries in Haybale (enabling binary search)
    - All entries are in the same index, ergo all entries are indexed
    - Individual files kept within approx 512MB size (definitely <1G)
    - Fully handled in memory (no random access on disk)
    - Multi-byte values stored in LittleEndian order
    - Max 16 million distinct key names (24 bit)
    - A bunch (_timestamp with all its tuples) is (probably) unique
      (since JSON is unsorted we don't know, and OpenActa doesn't care)
    - Stalks within a bunch may duplicate
    - Adjacent string values are de-duplicated both in memory and on disk
      (approx 10% space benefit)
    To do
    - On-disk compression
    - Signature (GPG or separate ed25519 ?) and encryption


Haystack is not a general purpose DBMS, and should not be used for that purpose.
It could be placed in the Very Large Database (VLDB) space, and its specialised
WORM architecture avoids many of the issues generally encountered there.
If Haystack were to be adapted to support update and delete operations, it
would have to deal with those issues just like any other database system. That
said, there may be an advantage in that Haystack has the "everything is indexed"
capability.
One aspect, Information Lifecycle Management, must be addressed in any
implementation. The user has to to decide for how long logs are kept, however
the system needs to consider that the requirement may be "forever".

The Haystack storage format is designed for WORM (Write Once, Read Many).
Any data written is never modified (aka immutable), which helps auditability,
chain-of-custody. In addition, the format uses section signatures, CRCs, and
other redundant	information	to help detecting file corruption, and aid with
recovery in case of (partial) corruption of a file.
(The viability of using Protocol Buffers (ProtoBuf) or FlatBuffers for the
storage structure was evaluated, but dismissed, as it made some things awkward.)


High level overview:

	- File
	  Header
	  Haystack: with lower and upper time boundary
		\_Haybales: one or more, each with an incremental Dictionary,
		    |       and their own time boundaries
			\_Bunch
	    	    \_Haystalks: sorted KV pairs, timestamped and interlinked
	  Trailer

We adopted a Haystack analogy (stalk-bunch-bale-stack) as it helps to not
confuse the system with other (different) database environments.


Haystack structure diagram

	+--------+---------------------------------+---------+
	| Header | (Dictionary & Haybale) ...      | Trailer |
	+--------+-------------+-------------------+---------+
	         |                \_Bunch ...      |
	         +---------------------------------+
	         |                  \_Haystalk ... |
	         +---------------------------------+

The key Dictionary is implemented using a 24-bit hash table. Haybales are
Sorted String Tables (SSTable), implemented without Log Structured Merge
Trees (LSM Trees) or mutability (update/delete), so that integrity of the log
data is always retained. Thus, Haystalks also do not contain "tombstones"
(indicator that data is obsolete).
In the reference implementation, Key-Value (KV) entries are added sequentially
and not immediately searchable. First a sort operation on the Haybale is
required, which flags it as sorted & immutable. At this stage, neighbouring
string values are de-duplicated (this de-duplication also applies to the
on-disk format). Haystalks are interlinked to create "rows", while retaining
the unique ability to directly and effectively search across all "columns".


Disk Section (DiskSection) structure diagram

		+--------------+----+-------------------+----- ... ----+-----------------------+
		+ signature    | ID | content len (n)   |content       | IEEE CRC-32           |
		+----+----+----+----+----+----+----+----+----- ... ----+-----+-----+-----+-----+
	ofs |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 | 8 ...    n-1 |  n  | n+1 | n+2 | n+3 |
		+----+----+----+----+----+----+----+----+----- ... ----+-----+-----+-----+-----+
		| da | fe | eb |  n | LSB    ...    MSB | xxx          | LSB      ...      MSB |
		+----+----+----+----+----+----+----+----+----- ... ----+-----+-----+-----+-----+
		| <CRC is over signature, ID, content len and content> |
		+----+----+----+----+----+----+----+----+----- ... ----+


ID 0: Disk File Header (DiskFileHeader) structure diagram

		+---------------+---------------+
		| version_major | version_minor |
		+---------------+---------------+
	ofs |       0       |       1       |
		+---------------+---------------+
		|       1       |       0       |
		+---------------+---------------+


ID 1: Disk Dictionary Header (DiskDictHeader) structure diagram

		+-----------------------+-----------------------+-------- ... -------+
		| prev_ofs              | num_dkeys             | dictionary entries |
		+-----+-----+-----+-----+-----+-----+-----+-----+-------- ... -------+
	ofs |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 | 8 ...              |
		+-----+-----+-----+-----+-----+-----+-----+-----+-------- ... -------+
		| LSB      ...      MSB | LSB      ...      MSB | xxx                |
		+-----+-----+-----+-----+-----+-----+-----+-----+-------- ... -------+

    Maximum 16M (16777216) dictionary keys, but written in 4 bytes here for alignment


    Disk Dictionary Entry (DiskDictEntry) structure diagram

		+-----------------+-----+---- ... ---+
		| dkey            | len | name       |
		+-----+-----+-----+-----+---- ... ---+
	ofs |   0 |   1 |   2 |   3 | 4 ...      |
		+-----+-----+-----+-----+---- ... ---+
		| LSB   ...   MSB |   n | xxx        |
		+-----+-----+-----+-----+---- ... ---+

	Maximum dictionary key length 255


ID 2: Disk Haybale Header (DiskHaybaleHeader) structure diagram

		+-----------------------+-----------------+-----------------+--- ... ---+
		| num_stalks            | time_first      | time_last       | stalks    |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+--- ... ---+
	ofs |   0 |   1 |   2 |   3 |   4 | ... |  11 |  12 | ... |  19 | 20 ...    |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+--- ... ---+
		| LSB      ...      MSB | LSB   ...   MSB | LSB   ...   MSB | xxx       |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+--- ... ---+

    A Haybale must always be preceded by a Dictionary


    Disk Haystalk (DiskHaystalk) structure diagram (type = int64 or IEEEfloat64)

		+--------------+------+--------------------+-------------------+---- ... ----+
		| dkey (#)     | type | first              | next              | val         |
		+----+----+----+------+----+----+----+-----+----+----+----+----+---- ... ----+
	ofs |  0 |  1 |  2 |   3  |  4 |  5 |  6 |  7  |  8 |  9 | 10 | 11 | 12  ...  19 |
		+----+----+----+------+----+----+----+-----+----+----+----+----+---- ... ----+
		| LSB  ... MSB |   n  | LSB    ...     MSB | LSB    ...    MSB | LSB ... MSB |
		+----+----+----+------+----+----+----+-----+----+----+----+----+---- ... ----+


	Disk Haystalk (DiskHaystalk) structure diagram (type = string, non-dedupped)

		+--------------+------+--------------------+-------------------+-------------------+---...--+
		| dkey (#)     | type | first              | next              | len               | string |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+---...--+
	ofs |  0 |  1 |  2 |   3  |  4 |  5 |  6 |  7  |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 ... |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+---...--+
		| LSB  ... MSB |   n  | LSB    ...     MSB | LSB    ...    MSB | LSB    ...    MSB | xxx    |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+---...--+


	Disk Haystalk (DiskHaystalk) structure diagram (type = string, dedupped)

		+--------------+------+--------------------+-------------------+-------------------+
		| dkey (#)     | type | first              | next              | len (magic #)     |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+
	ofs |  0 |  1 |  2 |   3  |  4 |  5 |  6 |  7  |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+
		| LSB  ... MSB |   n  | LSB    ...     MSB | LSB    ...    MSB | fe | ff | ff | ff |
		+----+----+----+------+----+----+----+-----+----+----+----+----+----+----+----+----+


ID 255: Disk Haystack Trailer structure diagram
		+-----------------------+-----------------+-----------------+
		| last_dict_ofs         | time_first      | time_last       |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+
	ofs |   0 |   1 |   2 |   3 |   4 | ... |  11 |  12 | ... |  19 |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+
		| LSB      ...      MSB | LSB   ...   MSB | LSB   ...   MSB |
		+-----+-----+-----+-----+-----+-----+-----+-----------------+


Informal references:
- https://en.wikipedia.org/wiki/Bigtable
- https://en.wikipedia.org/wiki/Log-structured_merge-tree
- https://en.wikipedia.org/wiki/Write_once_read_many
- https://en.wikipedia.org/wiki/Very_large_database
- https://vldb.org/ (VLDB Journal https://www.springer.com/journal/778)


EOF